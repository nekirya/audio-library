const sequelize = require('../models/database');
const Music = require('../models/Music');
const Books = require('../models/Books');

async function fillData() {
  try {
    await sequelize.sync({ force: false });
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await Music.destroy({ where: {} });
    await Books.destroy({ where: {} });
    console.log('–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const musicGenres = ['Rock', 'Pop', 'Jazz', 'Classical', 'Hip-Hop', 'Electronic', 'Country', 'R&B', 'Reggae', 'Metal'];
    const musicArtists = [
      'The Beatles', 'Queen', 'Michael Jackson', 'Madonna', 'Elvis Presley',
      'Led Zeppelin', 'Pink Floyd', 'David Bowie', 'Prince', 'Bob Dylan',
      'Radiohead', 'Coldplay', 'Beyonc√©', 'Adele', 'Taylor Swift',
      'Ed Sheeran', 'Billie Eilish', 'Dua Lipa', 'The Weeknd', 'Arctic Monkeys'
    ];

    const musicAlbums = [
      'Abbey Road', 'The Dark Side of the Moon', 'Thriller', 'Rumours', 'Back in Black',
      'The Joshua Tree', 'Nevermind', 'OK Computer', 'Hotel California', 'Born to Run',
      'Purple Rain', 'The Wall', 'A Night at the Opera', 'Led Zeppelin IV', 'Pet Sounds',
      'Revolver', 'Blood on the Tracks', 'The Rise and Fall of Ziggy Stardust', 'London Calling', 'Automatic for the People'
    ];

    const musicTitles = [
      'Bohemian Rhapsody', 'Hotel California', 'Imagine', 'Like a Rolling Stone', 'Yesterday',
      'Smells Like Teen Spirit', 'One', 'Billie Jean', 'Stairway to Heaven', 'Sweet Child O\' Mine',
      'Hey Jude', 'Wonderwall', 'Sweet Home Alabama', 'Let It Be', 'Shape of You',
      'Blinding Lights', 'Bad Guy', 'Dance Monkey', 'Watermelon Sugar', 'Levitating',
      'Stay', 'Save Your Tears', 'Good 4 U', 'Butter', 'Industry Baby',
      'Easy On Me', 'Stay', 'Shivers', 'Heat Waves', 'As It Was'
    ];

    const bookGenres = ['–†–æ–º–∞–Ω', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–£–∂–∞—Å—ã', '–§—ç–Ω—Ç–µ–∑–∏', '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–ü–æ—ç–∑–∏—è', '–î—Ä–∞–º–∞', '–ö–æ–º–µ–¥–∏—è'];
    const bookAuthors = [
      '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', '–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω',
      '–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å', '–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤', '–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–ª–∂–µ–Ω–∏—Ü—ã–Ω',
      '–í–ª–∞–¥–∏–º–∏—Ä –ù–∞–±–æ–∫–æ–≤', '–°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥', '–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥', '–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª',
      '–≠—Ä–Ω–µ—Å—Ç –•–µ–º–∏–Ω–≥—É—ç–π', '–ê–≥–∞—Ç–∞ –ö—Ä–∏—Å—Ç–∏', '–î—ç–Ω –ë—Ä–∞—É–Ω', '–•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏',
      '–î–∂–æ–Ω –¢–æ–ª–∫–∏–Ω', '–ê–π–∑–µ–∫ –ê–∑–∏–º–æ–≤', '–†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏', '–î–∂–µ–∫ –õ–æ–Ω–¥–æ–Ω'
    ];

    const bookPublishers = [
      '–ê–°–¢', '–≠–∫—Å–º–æ', '–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ', '–†–æ—Å–º—ç–Ω', '–î—Ä–æ—Ñ–∞',
      '–ê–∑–±—É–∫–∞', '–õ–µ–Ω–∏–∑–¥–∞—Ç', '–ú–æ–ª–æ–¥–∞—è –≥–≤–∞—Ä–¥–∏—è', '–í–µ—á–µ', '–¶–µ–Ω—Ç—Ä–ø–æ–ª–∏–≥—Ä–∞—Ñ',
      'Random House', 'Penguin', 'HarperCollins', 'Simon & Schuster'
    ];

    const bookTitles = [
      '–í–æ–π–Ω–∞ –∏ –º–∏—Ä', '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', '–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞', '–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
      '–¢–∏—Ö–∏–π –î–æ–Ω', '–î–æ–∫—Ç–æ—Ä –ñ–∏–≤–∞–≥–æ', '–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω', '–û—Ç—Ü—ã –∏ –¥–µ—Ç–∏', '–ú—ë—Ä—Ç–≤—ã–µ –¥—É—à–∏',
      '–ò–¥–∏–æ—Ç', '–ë—Ä–∞—Ç—å—è –ö–∞—Ä–∞–º–∞–∑–æ–≤—ã', '–ì–µ—Ä–æ–π –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', '–û–±–ª–æ–º–æ–≤', '–û—Ç–≤–µ—Ä–∂–µ–Ω–Ω—ã–µ',
      '1984', '–£–ª–∏—Å—Å', '–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü', '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä', '–ù–∞–¥ –ø—Ä–æ–ø–∞—Å—Ç—å—é –≤–æ —Ä–∂–∏',
      '–í–µ–ª–∏–∫–∏–π –ì—ç—Ç—Å–±–∏', '–¢—ë–º–Ω—ã–µ –Ω–∞—á–∞–ª–∞', '–ê—Ç–ª–∞–Ω—Ç —Ä–∞—Å–ø—Ä–∞–≤–∏–ª –ø–ª–µ—á–∏', '–ê–ª–∏—Å–∞ –≤ –°—Ç—Ä–∞–Ω–µ —á—É–¥–µ—Å',
      '–ì–æ—Ä–¥–æ—Å—Ç—å –∏ –ø—Ä–µ–¥—É–±–µ–∂–¥–µ–Ω–∏–µ', '–î—é–Ω–∞', '–§—É–Ω–¥–∞–º–µ–Ω—Ç', '–ù–æ—á–Ω–æ–π –¥–æ–∑–æ—Ä', '–ú–µ—Ç—Ä–æ 2033',
      '–ü–∏–∫–Ω–∏–∫ –Ω–∞ –æ–±–æ—á–∏–Ω–µ', '–°–æ–ª—è—Ä–∏—Å'
    ];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏
    const musicData = [];
    for (let i = 1; i <= 100; i++) {
      const artist = musicArtists[Math.floor(Math.random() * musicArtists.length)];
      const title = musicTitles[Math.floor(Math.random() * musicTitles.length)];
      
      musicData.push({
        title: `${title} ${Math.random() > 0.7 ? 'Part ' + (Math.floor(Math.random() * 3) + 1) : ''}`,
        artist: artist,
        album: Math.random() > 0.2 ? musicAlbums[Math.floor(Math.random() * musicAlbums.length)] : null,
        duration: Math.floor(Math.random() * 480) + 120, // 2-10 –º–∏–Ω—É—Ç
        genre: musicGenres[Math.floor(Math.random() * musicGenres.length)],
        year: Math.floor(Math.random() * 65) + 1960, // 1960-2025
        photo: `https://picsum.photos/300/300?random=${i}&seed=music`,
        description: `–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç–∏–ª–µ ${musicGenres[Math.floor(Math.random() * musicGenres.length)]}. –ò—Å–ø–æ–ª–Ω—è–µ—Ç ${artist}.`,
        filePath: `/music/${artist.toLowerCase().replace(/\s+/g, '_')}_${title.toLowerCase().replace(/\s+/g, '_')}.mp3`
      });
    }

    await Music.bulkCreate(musicData);
    console.log('100 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–∏–≥
    const booksData = [];
    for (let i = 1; i <= 100; i++) {
      const author = bookAuthors[Math.floor(Math.random() * bookAuthors.length)];
      const title = bookTitles[Math.floor(Math.random() * bookTitles.length)];
      
      booksData.push({
        title: `${title}${Math.random() > 0.8 ? ': ' + ['–¢–æ–º', '–ß–∞—Å—Ç—å', '–ö–Ω–∏–≥–∞'][Math.floor(Math.random() * 3)] + ' ' + (Math.floor(Math.random() * 3) + 1) : ''}`,
        author: author,
        publisher: bookPublishers[Math.floor(Math.random() * bookPublishers.length)],
        pages: Math.floor(Math.random() * 900) + 100, // 100-1000 —Å—Ç—Ä–∞–Ω–∏—Ü
        genre: bookGenres[Math.floor(Math.random() * bookGenres.length)],
        year: Math.floor(Math.random() * 225) + 1800, // 1800-2025
        photo: `https://picsum.photos/300/400?random=${i + 100}&seed=books`,
        description: `–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ –∂–∞–Ω—Ä–µ ${bookGenres[Math.floor(Math.random() * bookGenres.length)]}. –ê–≤—Ç–æ—Ä: ${author}. ${['–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Å—é–∂–µ—Ç', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏', '–ì–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª', '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ä–∞–∑–≤—è–∑–∫–∞'][Math.floor(Math.random() * 4)]}.`,
        filePath: `/books/${author.toLowerCase().replace(/\s+/g, '_')}_${title.toLowerCase().replace(/\s+/g, '_')}.pdf`
      });
    }

    await Books.bulkCreate(booksData);
    console.log('100 –∫–Ω–∏–∂–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ');

    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');
    console.log('üéµ –ú—É–∑—ã–∫–∞: 100 –∑–∞–ø–∏—Å–µ–π');
    console.log('üìö –ö–Ω–∏–≥–∏: 100 –∑–∞–ø–∏—Å–µ–π');
    
    process.exit(0);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

fillData();